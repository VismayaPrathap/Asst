firebase.js:
import firebase from 'firebase/compat/app';
import 'firebase/compat/auth';
import 'firebase/compat/database';

const firebaseConfig = {
  apiKey: "AIzaSyAr6ekKTuYjr7pDXO5RO1fJ2MFPt12WMCA",
  authDomain: "asst-987dd.firebaseapp.com",
  databaseURL: "https://asst-987dd-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "asst-987dd",
  storageBucket: "asst-987dd.appspot.com",
  messagingSenderId: "629126385889",
  appId: "1:629126385889:web:e74b9e87b89a65025627a0",
  measurementId: "G-MPJX7D692C"
};

// Initialize Firebase
const app = firebase.initializeApp(firebaseConfig);
export const db = firebase.database();
export const fb_auth = firebase.auth();

export default app;

App.js:
import React from 'react';
import { NavigationContainer } from "@react-navigation/native";
import { createNativeStackNavigator } from "@react-navigation/native-stack";
import Home from "./screens/Home";
import AddPatient from "./screens/AddPatient";
import PatientList from "./screens/PatientList";
import PatientStatus from './screens/PatientStatus';
import Login from './screens/Login';
import { AuthProvider, useAuth } from './screens/AuthProvider';

const Stack = createNativeStackNavigator()

const AppNavigator = () => {
  const { user } = useAuth();

  return (
    <Stack.Navigator initialRouteName={user? "Home" : "Login"}>
      <Stack.Screen name="Home" component={Home} options={{headerShown: false}} />
      <Stack.Screen name="Patient List" component={PatientList} />
      <Stack.Screen name="Details" component={AddPatient} />
      <Stack.Screen name="Patient Details" component={PatientStatus} />
      <Stack.Screen name="Login" component={Login} options={{headerShown: false}}/>
    </Stack.Navigator>
  );
}

export default function App() {
  return (
    <AuthProvider>
      <NavigationContainer>
        <AppNavigator />
      </NavigationContainer>
    </AuthProvider>
  );
}

Login.js:
import { useAuth } from './AuthProvider';
import React, { useState} from 'react';
import { View, TextInput, Button, StyleSheet, ActivityIndicator } from 'react-native';
import { useNavigation } from '@react-navigation/native';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const navigation = useNavigation();
  const { signIn, createUser } = useAuth();

  const signUpWithEmail = async () => {
    setLoading(true);
    try {
      await createUser(email, password);
      alert('Account created successfully. Please log in.');
    } catch (error) {
      console.log(error);
      alert('Error creating account: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  const signInWithEmail = async () => {
    setLoading(true);
    try {
      await signIn(email, password);
      navigation.navigate("Home");
    } catch (error) {
      console.log(error);
      alert('Error signing in: ' + error.message);
    } finally {
      setLoading(false);
    }
  };
  const Separator =() => <View style={styles.separator}/>
  return (
    <View style={styles.container}>
      <TextInput
        placeholder="Enter your Email"
        value={email}
        autoCapitalize='none'
        onChangeText={(text)=>setEmail(text)}
        style={styles.input} 
      />
      <TextInput
        placeholder="Enter your Password"
        value={password}
        autoCapitalize='none'
        onChangeText={(text)=>setPassword(text)}
        secureTextEntry={true}
        style={styles.input}
      />
      {loading ? (<ActivityIndicator size="large" color="#0000ff"/>
      ): (<>
      <Button title="Login" onPress={signInWithEmail} color="#72bcd4"/>
      <Separator/>
      <Button title="Create Account" onPress={signUpWithEmail} color="#72bcd4"/>
      </>
      )}
    </View>
  );
};

export default Login;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    marginHorizontal: 20,
  },
  input: {
    backgroundColor: '#fff',
    marginVertical: 4,
    height: 50,
    borderWidth: 1,
    borderRadius: 4,
    borderColor: 'lightblue',
    padding: 10,
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: '#737373',
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});

Home.js:
import React from 'react';
import { StyleSheet, Pressable, Text, View, SafeAreaView, Button, Platform } from 'react-native';
import { useAuth } from '../screens/AuthProvider';
import { useNavigation } from '@react-navigation/native';
import { globalStyles } from './Styles';

export default function Home() {
  const { signOut } = useAuth();
  const navigation = useNavigation();
  const { user } = useAuth();

  const handleLogout = async () => {
    try {
      await signOut();
      navigation.navigate("Login");
    } catch (error) {
      console.log(error);
      alert("Logout Failed: " + error.message);
    }
  };

  return (
    <SafeAreaView style={globalStyles.container}>
      <View style={[{ width: "90%", margin: 10, backgroundColor: "red" }]}>
          <Button
            onPress={() => navigation.navigate("Patient List")}
            title="Caregiver"
            color="#72bcd4"
          />
        </View>
        {/* <View style={[{ width: "90%", margin: 10, backgroundColor: "red" }]}>
          <Button
            title="Patient"
            color="#FF3D00"
          />
        </View> */}
      <Pressable style={styles.button} onPress={handleLogout}>
        <Text style={styles.buttonText}>Logout</Text>
      </Pressable>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  button: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 12,
    paddingHorizontal: 32,
    borderRadius: 4,
    elevation: 3,
    backgroundColor: 'black',
    marginTop: 20,
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

AuthProvider.js:
import React, { createContext, useContext, useEffect, useState } from 'react';
import { fb_auth } from '../src/config/firebase';
import { db } from "../src/config/firebase";

const AuthContext = createContext();
const auth = fb_auth;

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const signIn = async (email, password) => {
    try {
      const userCredential = await fb_auth.signInWithEmailAndPassword(email, password);
      const user = userCredential.user;
      setUser(user);
      return user;
    } catch (error) {
      console.log(error);
      throw new Error(error.message);
    }
  };

  const signOut = async () => {
    try {
      await fb_auth.signOut();
      setUser(null);
    } catch (error) {
      console.log(error);
      throw new Error(error.message);
    }
  };

  const createUser = async (email, password) => {
    try {
      const { user: userCredential } = await fb_auth.createUserWithEmailAndPassword(email, password);
      if (userCredential) {
        await db.ref(`users/${userCredential.uid}`).set({}); // Create an empty node for the user
      }
    } catch (error) {
      console.error('Error signing up:', error);
    }
  };

  const value = {
    user,
    signIn,
    createUser,
    signOut,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);

PatientList.js:
import React, { useState, useEffect } from 'react';
import { db } from '../src/config/firebase';
import { StyleSheet, Button, Text, TouchableOpacity, FlatList ,View, SafeAreaView } from 'react-native';
import { useAuth } from './AuthProvider';
import DeleteUser from './DeleteUser';
import { globalStyles } from './Styles';

export default function PatientList({ navigation }) {
  const [people, setPeople] = useState([]);
  const [loading, setLoading] = useState(false);
  const { user } = useAuth();

  useEffect(() => {
    if (user) {
      setLoading(true);
      db.ref(`users/${user.uid}/patients`).on('value', (snapshot) => {
        const patientsList = [];
        snapshot.forEach((childSnapshot) => {
          patientsList.push({...childSnapshot.val(), id: childSnapshot.key });
        });
        setPeople(patientsList);
        setLoading(false);
      });
    } else {
      setPeople([]);
      setLoading(false);
    }
  }, [user]); // Add user as a dependency so that the effect runs again when user changes

  const handleItemClick = (item) => {
    navigation.navigate("Patient Details", { user: item });
  };

  const renderItem = ({ item }) => (
    <View style={globalStyles.listItem}>
      <TouchableOpacity
        onPress={() => handleItemClick(item)}
        style={styles.button}
      >
      <Text style={globalStyles.listItemText}>{item.name}</Text>
      </TouchableOpacity>
      <DeleteUser id={item.id} navigation={navigation} />
    </View>
  );

  const Separator =() => <View style={styles.separator}/>

  return (
    <SafeAreaView style={globalStyles.container}>
      <Separator/>
      <View style={[{ width: "90%", margin: 10, backgroundColor: "red" }]}>
        <Button
          onPress={() => navigation.navigate("Details")}
          title="Add a Patient"
          color="#72bcd4"
        />
      </View>
      <View>
        <FlatList
        data={people}
        renderItem={renderItem}
        keyExtractor={(item) => item.id}
      />
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
  },
  text: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 16,
    marginTop: 16,
  },
  button: {
    backgroundColor: '#72bcd4', 
    padding: 10, 
    borderRadius: 5, 
  },
  buttonText: {
    fontSize: 16, 
    fontWeight: 'bold', 
    color: 'black',
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: '#737373',
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});

AddPatient.js:
import React, { useState } from 'react';
import { StyleSheet, Text, TextInput, Pressable, View } from 'react-native';
import { db } from '../src/config/firebase';
import { useAuth } from './AuthProvider';
import { globalStyles } from './Styles';

export default function AddPatient({ navigation }) {
  const { user } = useAuth();
  const [name, setName] = useState('');
  const [age, setAge] = useState('');
  const [em_name, setEmName] = useState('');
  const [em_phone, setEmPhone] = useState('');
  const [error, setError] = useState('');

  const handleAddPatient = async () => {
    if (!name || !age || !em_name || !em_phone) {
      setError('Please fill in all the fields before adding a patient.');
      return;
    }

    if (isNaN(age)) {
      setError('Age must be a number.');
      return;
    }

    if (isNaN(em_phone)) {
      setError('Emergency contact phone number must be a number.');
      return;
    }

    try {
      await db.ref(`users/${user.uid}/patients`).push({
        name,
        age: parseInt(age),
        em_name,
        em_phone: parseInt(em_phone),
      });
      navigation.goBack();
    } catch (error) {
      console.log(error);
      alert('Error adding patient: ' + error.message);
    }
  };

  return (
    <View style={globalStyles.container}>
      <Text style={styles.label}>Enter the details of the patient:</Text>
      <TextInput
        style={styles.input}
        placeholder="Enter Patient Name"
        value={name}
        onChangeText={(text) => setName(text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Enter Patient Age"
        value={age}
        onChangeText={(text) => setAge(text)}
        keyboardType="numeric"
      />
      <TextInput
        style={styles.input}
        placeholder="Enter Emergency Contact Name"
        value={em_name}
        onChangeText={(text) => setEmName(text)}
      />
      <TextInput
        style={styles.input}
        placeholder="Enter Emergency Contact Phone"
        value={em_phone}
        onChangeText={(text) => setEmPhone(text)}
        keyboardType="numeric"
      />
      {error && <Text style={styles.error}>{error}</Text>}
      <Pressable style={globalStyles.button} onPress={handleAddPatient}>
        <Text style={globalStyles.listItemText}>Add Patient</Text>
      </Pressable>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  label: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  input: {
    height: 50,
    width: 350,
    borderWidth: 1,
    borderRadius: 4,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 10,
    marginTop: 10,
    marginBottom: 20
  },
  button: {
    backgroundColor: '#72bcd4',
    padding: 10,
    borderRadius: 4,
    width: 100,
    alignItems: 'center',
    margin: 30,
  },
  buttonText: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  error: {
    color: 'red',
    marginBottom: 10,
  },
});

DeleteUser.js:
import React from 'react';
import { db } from "../src/config/firebase";
import { useAuth } from './AuthProvider';
import { Text, View, Pressable } from 'react-native';
import { globalStyles } from './Styles'

export default function DeleteUser({ id, navigation }) {
  const { user } = useAuth();
  const patientRef = db.ref(`users/${user.uid}/patients/${id}`);

  function deleteUser() {
    patientRef.remove()
     .then(() => {
        console.log('User deleted successfully');
      })
     .catch((error) => {
       console.log('Error deleting user: ', error);
      });
  }

  return (
    <View style={globalStyles.container}>
      <Pressable onPress={deleteUser}>
        <Text>Delete this Patient</Text>
      </Pressable>
    </View>
  );
}


PatientStatus.js:
import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Alert } from 'react-native';
import { ref, onValue } from 'firebase/database'
import { db } from "../src/config/firebase";

const PatientStatus = ({ route }) => {
  const { user } = route.params;
  const [data, setData] = useState({});

  useEffect(()=> {
    const userData = ref(db, 'test/');
    onValue(userData, (snapshot) => {
      const userDataVal = snapshot.val();
      setData(userDataVal);
    })
  }, []);

  useEffect(() => {
    if (data.int === 1) {
      Alert.alert('Fall Detected!');
    }
  }, [data.int]);

  return (
    <View style={styles.container}>
      <Text style={styles.text}>Name:</Text>
      <View style={styles.detailsContainer}>
        <View style={styles.detailBox}>
          <Text style={styles.text}>{user.name}</Text>
        </View>
        <Text style={styles.text}>Age:</Text>
        <View style={styles.detailBox}>
          <Text style={styles.text}>{user.age}</Text>
        </View>
        <Text style={styles.text}>Emergency Contact Name:</Text>
        <View style={styles.detailBox}>
          <Text style={styles.text}>{user.em_name}</Text>
        </View>
        <Text style={styles.text}>Emergency Contact Phone:</Text>
        <View style={styles.detailBox}>
          <Text style={styles.text}>{user.em_phone}</Text>
        </View>
        {
          data && (
            <View>
              <Text style={styles.text}>Pulse:</Text>
              <View style={styles.detailBox}>
                <Text style={styles.text}>{data.pulse}</Text>
              </View>
              <Text style={styles.text}>Fall Detection:</Text>
              <View style={styles.detailBox}>
                <Text style={styles.text}>{data.int}</Text>
              </View>
            </View>
          )
        }
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    marginHorizontal: 20,
  },
  detailsContainer: {
    marginBottom: 20,
  },
  detailBox: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    backgroundColor: "lightblue",
    padding: 10,
    marginBottom: 30,
    marginTop: 10,
  },
  text: {
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default PatientStatus;

git add filename or .
git commit -m "first commit"
git push -u origin main     